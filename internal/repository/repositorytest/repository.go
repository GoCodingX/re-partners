// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -package=repositorytest -source=repository.go -destination=repositorytest/repository.go .
//

// Package repositorytest is a generated GoMock package.
package repositorytest

import (
	context "context"
	reflect "reflect"

	repository "github.com/GoCodingX/repartners/internal/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreatePack mocks base method.
func (m *MockRepository) CreatePack(ctx context.Context, pack *repository.Pack) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePack", ctx, pack)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePack indicates an expected call of CreatePack.
func (mr *MockRepositoryMockRecorder) CreatePack(ctx, pack any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePack", reflect.TypeOf((*MockRepository)(nil).CreatePack), ctx, pack)
}

// DeletePack mocks base method.
func (m *MockRepository) DeletePack(ctx context.Context, packID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePack", ctx, packID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePack indicates an expected call of DeletePack.
func (mr *MockRepositoryMockRecorder) DeletePack(ctx, packID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePack", reflect.TypeOf((*MockRepository)(nil).DeletePack), ctx, packID)
}

// GetPacks mocks base method.
func (m *MockRepository) GetPacks(ctx context.Context) ([]repository.Pack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPacks", ctx)
	ret0, _ := ret[0].([]repository.Pack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPacks indicates an expected call of GetPacks.
func (mr *MockRepositoryMockRecorder) GetPacks(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPacks", reflect.TypeOf((*MockRepository)(nil).GetPacks), ctx)
}

// UpdatePack mocks base method.
func (m *MockRepository) UpdatePack(ctx context.Context, packID string, size int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePack", ctx, packID, size)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePack indicates an expected call of UpdatePack.
func (mr *MockRepositoryMockRecorder) UpdatePack(ctx, packID, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePack", reflect.TypeOf((*MockRepository)(nil).UpdatePack), ctx, packID, size)
}
