// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CalculatePacksRequest defines model for CalculatePacksRequest.
type CalculatePacksRequest struct {
	Items int `json:"items"`
}

// CalculatePacksResponse defines model for CalculatePacksResponse.
type CalculatePacksResponse = []PackAndItems

// CreatePackRequest defines model for CreatePackRequest.
type CreatePackRequest struct {
	Size int32 `json:"size"`
}

// Detail defines model for Detail.
type Detail struct {
	// Field The specific field related to the error.
	Field string `json:"field"`

	// Message Human-readable explanation of the field error.
	Message string `json:"message"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code HTTP status code.
	Code int `json:"code"`

	// Details List of detailed error objects for granular issues.
	Details *[]Detail `json:"details,omitempty"`

	// Message Human-readable summary of the error.
	Message string `json:"message"`

	// Status Status code for categorization, e.g., 'INVALID_ARGUMENT'.
	Status string `json:"status"`
}

// GetPacksResponse defines model for GetPacksResponse.
type GetPacksResponse = []Pack

// Pack defines model for Pack.
type Pack struct {
	Id   openapi_types.UUID `json:"id"`
	Size int32              `json:"size"`
}

// PackAndItems defines model for PackAndItems.
type PackAndItems struct {
	PackCount int32 `json:"pack_count"`
	PackSize  int32 `json:"pack_size"`
}

// UpdatePackRequest defines model for UpdatePackRequest.
type UpdatePackRequest struct {
	Size int32 `json:"size"`
}

// PostPacksJSONRequestBody defines body for PostPacks for application/json ContentType.
type PostPacksJSONRequestBody = CreatePackRequest

// PostPacksCalculateJSONRequestBody defines body for PostPacksCalculate for application/json ContentType.
type PostPacksCalculateJSONRequestBody = CalculatePacksRequest

// UpdatePackJSONRequestBody defines body for UpdatePack for application/json ContentType.
type UpdatePackJSONRequestBody = UpdatePackRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets a list of packs
	// (GET /packs)
	GetPacks(ctx echo.Context) error

	// (POST /packs)
	PostPacks(ctx echo.Context) error

	// (POST /packs/calculate)
	PostPacksCalculate(ctx echo.Context) error
	// Delete a pack by ID
	// (DELETE /packs/{packId})
	DeletePack(ctx echo.Context, packId openapi_types.UUID) error
	// Update a pack by ID
	// (PATCH /packs/{packId})
	UpdatePack(ctx echo.Context, packId openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPacks converts echo context to params.
func (w *ServerInterfaceWrapper) GetPacks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPacks(ctx)
	return err
}

// PostPacks converts echo context to params.
func (w *ServerInterfaceWrapper) PostPacks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPacks(ctx)
	return err
}

// PostPacksCalculate converts echo context to params.
func (w *ServerInterfaceWrapper) PostPacksCalculate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPacksCalculate(ctx)
	return err
}

// DeletePack converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePack(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "packId" -------------
	var packId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "packId", ctx.Param("packId"), &packId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter packId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePack(ctx, packId)
	return err
}

// UpdatePack converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePack(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "packId" -------------
	var packId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "packId", ctx.Param("packId"), &packId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter packId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePack(ctx, packId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/packs", wrapper.GetPacks)
	router.POST(baseURL+"/packs", wrapper.PostPacks)
	router.POST(baseURL+"/packs/calculate", wrapper.PostPacksCalculate)
	router.DELETE(baseURL+"/packs/:packId", wrapper.DeletePack)
	router.PATCH(baseURL+"/packs/:packId", wrapper.UpdatePack)

}

type GetPacksRequestObject struct {
}

type GetPacksResponseObject interface {
	VisitGetPacksResponse(w http.ResponseWriter) error
}

type GetPacks200JSONResponse GetPacksResponse

func (response GetPacks200JSONResponse) VisitGetPacksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostPacksRequestObject struct {
	Body *PostPacksJSONRequestBody
}

type PostPacksResponseObject interface {
	VisitPostPacksResponse(w http.ResponseWriter) error
}

type PostPacks201JSONResponse Pack

func (response PostPacks201JSONResponse) VisitPostPacksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostPacks400JSONResponse ErrorResponse

func (response PostPacks400JSONResponse) VisitPostPacksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostPacksCalculateRequestObject struct {
	Body *PostPacksCalculateJSONRequestBody
}

type PostPacksCalculateResponseObject interface {
	VisitPostPacksCalculateResponse(w http.ResponseWriter) error
}

type PostPacksCalculate200JSONResponse CalculatePacksResponse

func (response PostPacksCalculate200JSONResponse) VisitPostPacksCalculateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeletePackRequestObject struct {
	PackId openapi_types.UUID `json:"packId"`
}

type DeletePackResponseObject interface {
	VisitDeletePackResponse(w http.ResponseWriter) error
}

type DeletePack204Response struct {
}

func (response DeletePack204Response) VisitDeletePackResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdatePackRequestObject struct {
	PackId openapi_types.UUID `json:"packId"`
	Body   *UpdatePackJSONRequestBody
}

type UpdatePackResponseObject interface {
	VisitUpdatePackResponse(w http.ResponseWriter) error
}

type UpdatePack204Response struct {
}

func (response UpdatePack204Response) VisitUpdatePackResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Gets a list of packs
	// (GET /packs)
	GetPacks(ctx context.Context, request GetPacksRequestObject) (GetPacksResponseObject, error)

	// (POST /packs)
	PostPacks(ctx context.Context, request PostPacksRequestObject) (PostPacksResponseObject, error)

	// (POST /packs/calculate)
	PostPacksCalculate(ctx context.Context, request PostPacksCalculateRequestObject) (PostPacksCalculateResponseObject, error)
	// Delete a pack by ID
	// (DELETE /packs/{packId})
	DeletePack(ctx context.Context, request DeletePackRequestObject) (DeletePackResponseObject, error)
	// Update a pack by ID
	// (PATCH /packs/{packId})
	UpdatePack(ctx context.Context, request UpdatePackRequestObject) (UpdatePackResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetPacks operation middleware
func (sh *strictHandler) GetPacks(ctx echo.Context) error {
	var request GetPacksRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPacks(ctx.Request().Context(), request.(GetPacksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPacks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetPacksResponseObject); ok {
		return validResponse.VisitGetPacksResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostPacks operation middleware
func (sh *strictHandler) PostPacks(ctx echo.Context) error {
	var request PostPacksRequestObject

	var body PostPacksJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostPacks(ctx.Request().Context(), request.(PostPacksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPacks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostPacksResponseObject); ok {
		return validResponse.VisitPostPacksResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostPacksCalculate operation middleware
func (sh *strictHandler) PostPacksCalculate(ctx echo.Context) error {
	var request PostPacksCalculateRequestObject

	var body PostPacksCalculateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostPacksCalculate(ctx.Request().Context(), request.(PostPacksCalculateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPacksCalculate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostPacksCalculateResponseObject); ok {
		return validResponse.VisitPostPacksCalculateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeletePack operation middleware
func (sh *strictHandler) DeletePack(ctx echo.Context, packId openapi_types.UUID) error {
	var request DeletePackRequestObject

	request.PackId = packId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePack(ctx.Request().Context(), request.(DeletePackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePack")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeletePackResponseObject); ok {
		return validResponse.VisitDeletePackResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdatePack operation middleware
func (sh *strictHandler) UpdatePack(ctx echo.Context, packId openapi_types.UUID) error {
	var request UpdatePackRequestObject

	request.PackId = packId

	var body UpdatePackJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePack(ctx.Request().Context(), request.(UpdatePackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePack")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdatePackResponseObject); ok {
		return validResponse.VisitUpdatePackResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWUW/bNhD+K8RtQF8022mCPegtnYPOQFYEbdqXoigY8SyzFUmVpIK4gf77wKNiSyHd",
	"ZFuCNS+RpSPv+767+8hbqIxqjUbtHZS34KoNKk6Pf/Cm6hru8YJXX91b/Nah8+FDa02L1kukMOlR0YPi",
	"N1J1CsqjRfgrQEk9vCjAb1uEEqT2WKOFvi/A4rdOWhRQfhw2+bSLM1dfsPLQFwkK1xrtcJL4V4trKOGX",
	"+Z7KfOAxD6tOtVhRbL/bn1vLt7S9xWHvgwSd/E751sYq7iOJ45dQ3CP8j/jSnjm6S/RcNimItcRGhAeB",
	"rrKy9dJoKOFyg8y1WMm1rBjFMItBLcG8YX6DDK01dgYF4A1XbROyoQopdsmdt1LXIblC53iNaZo/O8X1",
	"bxa54FcNMrxpG655+MjMmtLE3JlkZyEZU53z7AoZZ9e8kYJxISw6N0tR3BMq8t5Dy2l2FrKOO2MqXWVE",
	"jtLl5QVznvvOsRAxQX0SyjmuN6QVLUBQrVy697l0PggTA3DQhUXEjq2NZbXlumu4ZdK5DkmIR/Xz0B+Z",
	"Tn5s8VynFLfbu8JlSvYhlChWd034Z7lmidql6d7tNSWmFfdYGyu/044Fw1k9K9iL1ZsPp+er5efTt6/f",
	"/3X25vLFFMP9zw82ClV5r8IOX65hXqP/926S057ep84oJrbRdVJE1zhHXfsNlMe/k2mMf6YyP4P7EI6D",
	"FjSxzIRUy6uvnyvTaZ9FlU4JLTjI4gGk+8XFOHMO9vtW/EROHsKkXpuQzktPPU09x04vVsyhvUYLBVyj",
	"dXFsjmaL2SLwMC1q3koo4ZheBeJ+Q/jnQQJ6qpHoBXI0VisB5a6tISCMnU3BLxeL6IPaYywbb9tGVrRy",
	"/sWF/Hcn/0MTkIwOMZ06QI2eEVJm91EFDMYTgTrGWTPYZGQVWsW4DK0L40a8qLSvjNg+GaX0CpDh9M4b",
	"iwPScQN422Gf6H30ZOCi4/wQz0jlAk6esNbTczUD4hUXbKRZXwwdOq/uLm00gz+u6u6C91zlzV5j++kc",
	"58u4eDYQhzXdRaYjNBL4NvxbiT4evw1GpacKL+k9NVDwEMsVerQOyo+5W+RqeXcjCFuH2+Owb/AxKMmE",
	"oADNFdKvkD6ZhGIkx3869/pPSTFO0qtGRBgBH7CaKALjMehqy1bLeCj5apNKtj9DUsn+NxWefiTSozLT",
	"iDGIdHuE42Wq0+03OHgSDEmm5en7/u8AAAD//3CYNtqXDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
